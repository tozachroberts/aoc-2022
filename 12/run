#!/usr/bin/env python3

import math
import pdb
import pprint
import sys

class Grid(list):
    def __init__(self, id=None):
        self._id = id
        self._map = []
        self._visited = set()
        super().__init__(self)

    def __repr__(self):
        return f"Grid{str(self._id)}"

    def pprint(self):
        for row in self:
            print(''.join([f"{x:02d}" for x in row]))

    def startnode(self):
        for row in self:
            for height in row:
                if height == 0:
                    return (self.index(row),row.index(height))

    ### Funcional BFS but limited to small data sets
    def map(self, node):
        q = [(node, [node])]
        while q and not self._map:
            (node,path) = q.pop(0)
            self._visited.add(node)
            (row,col) = node
            height = self[row][col]
            #print(f"map{row,col} {height:02d} lenp{len(path)} {path}")
            print(f"map{row,col} {height:02d} lenp{len(path)}")
            ### Up,Down,Left,Right
            for (nextr,nextc) in ((row,col-1), (row-1,col), (row,col+1), (row+1,col)):
                if (nextr,nextc) not in self._visited \
                   and (nextr,nextc) not in path \
                   and nextr >= 0 \
                   and nextr < len(self) \
                   and nextc >= 0 \
                   and nextc < len(self[nextr]) \
                   and self[nextr][nextc] <= height + 1:
                    ### path needs to be distinct per child, not additive 
                    nextpath = path + [(nextr,nextc)]
                    if self[nextr][nextc] == 27:
                        if not self._map:
                            self._map = nextpath
                        return nextpath
                    else:
                        q.append(((nextr,nextc),nextpath))
                        
    def printmap(self):
        print(' '.join([f"{r,c}" for (r,c) in self._map]))
        print(f"steps[{len(self._map)-1}]")

def main():
    filename = "input.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test"):
        filename = "test.txt"
        knots = 1
    if (len(sys.argv) > 1 and sys.argv[1] == "test2"):
        filename = "test2.txt"
    f = open(filename,"r")

    grid = Grid(0)
    for line in f.readlines():
        row = []
        line = line.rstrip('\n')
        for token in list(line):
            height = None
            if token == 'S':
                height = 0
            elif token == 'E':
                height = 27
            else:
                height = ord(token) - 96
            row.append(height)
        grid.append(row)
    grid.pprint()
    grid.map(grid.startnode())
    #grid.badbfsmap(grid.startnode())
    #grid._map = list(grid.badbfsmap(grid.startnode()))
    grid.printmap()

if __name__ == "__main__":
    main()