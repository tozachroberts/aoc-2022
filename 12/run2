#!/usr/bin/env python3

import math
import pdb
import pprint
import sys

def print_grid(grid):
    for row in grid:
        print(''.join([f"{x:02d} " for x in row]))

def find_start_end(grid):
    start = None
    end = None
    for row in grid:
        for height in row:
            if height == 0:
                start = (grid.index(row),row.index(height))
            if height == 27:
                end = (grid.index(row),row.index(height))
    return (start, end)

def find_starts(grid):
    starts = []
    for row in grid:
        for height in row:
            if height == 1:
                starts.append((grid.index(row),row.index(height)))
    return starts

def map_path(path, start, end):
    mapped = []
    if (path[end] == None):
        print("No valid path discovered")
    else:
        mapped.insert(0,end)
        parent = path[end]
        while (parent != start):
            mapped.insert(0,parent)
            parent = path[parent]
        if (parent == start):
            mapped.insert(0,start)
    return mapped

def print_mapped(mapped):
    print(f"steps[{len(mapped)-1}] ", end='')
    print(' '.join([f"{r,c}" for (r,c) in mapped]))
    
### Funcional BFS but limited to small data sets
def bfsmap(grid, start, end):
    q = [start]
    visited = [start]
    prev = {}
    prev[end] = None
    while q:
        current = q.pop(0)
        (row,col) = current
        height = grid[row][col]
        ### Up,Down,Left,Right
        for (nextr,nextc) in ((row,col-1), (row-1,col), (row,col+1), (row+1,col)):
            if (nextr,nextc) not in visited \
                    and nextr >= 0 \
                    and nextr < len(grid) \
                    and nextc >= 0 \
                    and nextc < len(grid[nextr]) \
                    and grid[nextr][nextc] <= height + 1:
                q.append((nextr,nextc))
                visited.append((nextr,nextc)) 
                prev[(nextr,nextc)] = current
    return prev

def main():
    filename = "input.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test"):
        filename = "test.txt"
        knots = 1
    if (len(sys.argv) > 1 and sys.argv[1] == "test2"):
        filename = "test2.txt"
    f = open(filename,"r")

    grid = []
    for line in f.readlines():
        row = []
        line = line.rstrip('\n')
        for token in list(line):
            height = None
            if token == 'S':
                height = 0
            elif token == 'E':
                height = 27
            else:
                height = ord(token) - 96
            row.append(height)
        grid.append(row)
    (start, end) = find_start_end(grid)
    print_grid(grid)
    path = bfsmap(grid, start, end)
    mapped = map_path(path, start, end)
    print_mapped(mapped)
    
    print("\nFinding shortest starting from an 'a'...")
    starts = find_starts(grid)
    shortest = None
    shortest_start = None
    for start in starts:
        print(f"'a' {start} ", end='')
        path = bfsmap(grid, start, end)
        if path[end] != None:
            mapped = map_path(path, start, end)
            print(f"FOO[{len(mapped) - 1}] ", end='')
            print_mapped(mapped)
            if shortest == None or len(mapped) - 1 < shortest:
                shortest = len(mapped) - 1
                shortest_start = start
    print(f"Shortest from any point a: {shortest} starting at {shortest_start}")

if __name__ == "__main__":
    main()