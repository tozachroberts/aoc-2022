#!/usr/bin/env python3

import pprint

def is_visible(tree, grid, row, col):
    return _left(tree, grid, row, col)
    
def _left(tree, grid, row, col):
    v = True
    other_col = col - 1
    while other_col > 0:
        other = grid[row][other_col]
        if tree <= other:
            v = False
            print(f"[{row},{col}-{tree} hidden by {row},{other_col}-{other}")
            break
        other_col -= 1
    return v

def main():
    f = open("test.txt","r")
    
    grid = []
    for line in f.readlines():
        row = []
        line = line.rstrip('\n')
        line_tokens = [int(h) for h in list(line)]
        for height in line_tokens:
            row.append(height)
        grid.append(row)
    pprint.pprint(grid, compact=True)
    
    visible = 0
    visible += 2*(len(grid) + len(grid[0]) - 2)
    print(f"perimeter[{visible}]")
    
    row = 1
    col = 1
    while row < len(grid):
        while col < len(grid[0]):
            tree = grid[row][col]
            if is_visible(tree, grid, row, col):
                print(f"[{row},{col}-{tree} visible")
                visible += 1
            col += 1
        row += 1

if __name__ == "__main__":
    main()