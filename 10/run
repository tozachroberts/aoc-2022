#!/usr/bin/env python3

#import math
import pdb
import pprint
import sys

class Register:
    def __init__(self, id=None, value=1):
        self.id = id
        self.value = 1
    
    def __repr__(self):
        return f"Register[{self.id}]:{self.value}"
    
    def add(self, value=0):
        self.value += value
        return self.value
        
class CPU():
    def __init__(self, registers=[], ops=[]):
        #super().__init__()
        self.registers = registers
        self.ops = ops
        self.clock = None

    def run(self):
        for i in range(1,len(self.ops)+1):
            self.clock = i
            op = self.ops[i-1]
            if ' ' in op:
                (op, value) = op.split(' ')
                value = int(value)
                self.registers[0].add(value)
        #pdb.set_trace()

def main():
    filename = "input.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test"):
        filename = "test.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test2"):
        filename = "test2.txt"
    f = open(filename,"r")
    
    instrs = []
    ops = []
    for line in f.readlines():
        line = line.rstrip('\n')
        instr = line
        instrs.append(instr)
        op = instr
        if op == "noop":
            ops.append(op)
        elif op.startswith("addx"):
            ops.append("noop")
            ops.append(instr)
    print(f"ops[{ops}]")
    
    cpu = CPU([Register(id='X', value=1)], ops)
    cpu.run()            
    print(f"clock[{cpu.clock}] register[{cpu.registers[0]}]")


if __name__ == "__main__":
    main()