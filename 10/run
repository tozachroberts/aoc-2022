#!/usr/bin/env python3

#import math
import pdb
import pprint
import sys

class Register:
    def __init__(self, id=None, value=1):
        self.id = id
        self.value = 1
    
    def __repr__(self):
        return f"Register[{self.id}]:{self.value}"
    
    def add(self, value=0):
        self.value += value
        return self.value
        
class CPU():
    def __init__(self, registers=[], ops=[]):
        #super().__init__()
        self.registers = registers
        self.ops = ops
        self.clock = None
        self.signal = 0
        self.screen = []

    def run(self):
        for i in range(1,len(self.ops)+1):
            self.clock = i
            if ((self.clock+20) % 40 == 0):
                self.update_signal()
                #print(f"update_signal: clock[{self.clock}] op[{op}] value[{value}] reg[{self.registers[0].value}] sig[{self.signal}]")
            self.draw_pixel()
            op = self.ops[i-1]
            value = 0
            if ' ' in op:
                (op, value) = op.split(' ')
                value = int(value)
                self.registers[0].add(value)
        self.draw()
        #pdb.set_trace()
    
    def update_signal(self):
        self.signal += (self.clock * self.registers[0].value)
        return self.signal
        
    def draw_pixel(self):
        (row,col) = divmod(self.clock-1, 40)
        if len(self.screen) <= row:
            self.screen.append([])
        pixels = [x for x in range(self.registers[0].value - 1, self.registers[0].value + 2)]
        if col in pixels:
            self.screen[row].append('#')
        else:
            self.screen[row].append('.')

    def draw(self):
        for row in self.screen:
            print(''.join(row))

def main():
    filename = "input.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test"):
        filename = "test.txt"
    if (len(sys.argv) > 1 and sys.argv[1] == "test2"):
        filename = "test2.txt"
    f = open(filename,"r")
    
    instrs = []
    ops = []
    for line in f.readlines():
        line = line.rstrip('\n')
        instr = line
        instrs.append(instr)
        op = instr
        if op == "noop":
            ops.append(op)
        elif op.startswith("addx"):
            ops.append("noop")
            ops.append(instr)
    #print(f"ops[{ops}]")
    
    cpu = CPU([Register(id='X', value=1)], ops)
    cpu.run()            
    print(f"clock[{cpu.clock}] {cpu.registers[0]} signal[{cpu.signal}]")

if __name__ == "__main__":
    main()